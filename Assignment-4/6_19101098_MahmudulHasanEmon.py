# -*- coding: utf-8 -*-
"""DATA_PREPROCESSING_19101098.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wUWWOJEBydi83pcx3udOlSn0sczH4aYA

**Task-03: Load the dataset as dataframe using pandas**
"""

import pandas as pd

wine = pd.read_csv("wine.csv")

"""**Data visualization**"""

wine.shape

wine.head() # default = 5

wine.sample() # default = 1

wine.columns

"""**Task-04: Handle missing values (if needed)**

* Null values
* Missing values
* NaN values
"""

# True  : if cell value is NaN
# False : if cell value is not NaN

wine.isnull()

# column_name frequency_of_nan_values

wine.isnull().sum()

# Impute missing values-01

#No NaN values found in this "wine dataset" that's why did not handle missing values.

"""**Task-05: Encode categorical features (if needed)**"""

wine.info()

wine['quality'].unique()

# encode using one-hot

print(list(wine['quality'].unique()))

quality_enc = pd.get_dummies(wine['quality'])

quality_enc

wine['quality'].head()

"""**Task-06: Scale all the values between 0-1 with proper scaling technique**

**MinMax Scaler:**

Scales values to a range between 0 and 1 if no negative values, and -1 to 1 if there are negative values present.
"""

print(wine["free sulfur dioxide"].max())
print(wine["free sulfur dioxide"].min())

from sklearn.preprocessing import MinMaxScaler

list_of_features = ["free sulfur dioxide"]

scaler = MinMaxScaler()

scaler.fit(wine[list_of_features])

scaled_data = scaler.transform(wine[list_of_features])

print(scaled_data.max())

print(scaled_data.min())

scaled_data

"""**Task-07: Split the dataset into features and labels. (Use your intuition to determine which column indicates the labels.)**"""

from sklearn.model_selection import train_test_split

list_of_features = ['fixed acidity','volatile acidity','citric acid','residual sugar','chlorides','free sulfur dioxide','total sulfur dioxide','density','pH','sulphates','alcohol']
x_data = wine[list_of_features]
y_data = wine["quality"]

X_train, X_test, y_train, y_test = train_test_split(x_data, y_data,random_state=1)