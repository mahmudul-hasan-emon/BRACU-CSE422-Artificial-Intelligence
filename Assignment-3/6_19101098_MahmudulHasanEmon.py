# -*- coding: utf-8 -*-
"""6_19101098_MahmudulHasanEmon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xcx3MPV20JBBEcrJwbi_Q_mJQ-X_cLeM
"""

import math
import random
import numpy as np

file = open('input.txt', 'r')

dep = int(file.readline())*2
branch = int(file.readline())
leaf_node_count = pow(branch, dep)

range_line = file.readline()
start = int((range_line.split())[0])
end = int((range_line.split())[1])

branches = 0
for i in range(dep+1):
    branches += pow(branch, i)
tree = np.zeros((branches, branches), int)
limit = 0
for d in range(dep):
    limit += pow(branch, d)
temp = 0
for i in range(limit):
    for j in range(branch):
        temp += 1
        tree[i][temp] = 1

leaf_nodes = np.zeros(branches, int)
for s in range((branches - leaf_node_count), branches):
    leaf_nodes[s] = random.randint(start, end)

compare1 = 0

def minimax(pos, dep, maxPlayer):
    global compare1
    if dep == 0:
        return leaf_nodes[pos]

    if maxPlayer is True:
        maxFind = -math.inf
        for i in range(branches):
            if tree[pos][i] == 1:
                eval = minimax(i, dep-1, False)
                maxFind = max(maxFind, eval)
        return maxFind

    else:
        minFind = math.inf
        for j in range(branches):
            if tree[pos][j] == 1:
                find = minimax(j, dep - 1, True)
                compare1 += 1
                minFind = min(minFind, find)
        return minFind


minimax_output = minimax(0, 2, True)

compare2 = 0

def alpha_beta_pruning(pos, dep, alpha, beta, maxPlayer):
    global compare2
    if dep == 0:
        return leaf_nodes[pos]

    if maxPlayer is True:
        maxFind = -math.inf
        for i in range(branches):
            if tree[pos][i] == 1:
                find = alpha_beta_pruning(i, dep - 1, alpha, beta, False)
                maxFind = max(maxFind, find)
                alpha = max(alpha, find)
                if beta <= alpha:
                    break
        return maxFind

    else:
        minFind = math.inf
        for j in range(branches):
            if tree[pos][j] == 1:
                find = alpha_beta_pruning(j, dep - 1, alpha, beta, True)
                compare2 += 1
                minFind = min(minFind, find)
                beta = min(beta, find)
                if beta <= alpha:
                    break
        return minFind


abpruning_output = alpha_beta_pruning(0, 2, -math.inf, math.inf, True)

print("Depth:", dep)
print("Branch:", branch)